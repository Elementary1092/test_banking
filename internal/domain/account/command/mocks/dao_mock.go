// Code generated by MockGen. DO NOT EDIT.
// Source: /home/quark/alif/internal/domain/account/command/dao.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/Elementary1092/test_banking/internal/domain/account/command/model"
	gomock "github.com/golang/mock/gomock"
)

// MockWriteDAO is a mock of WriteDAO interface.
type MockWriteDAO struct {
	ctrl     *gomock.Controller
	recorder *MockWriteDAOMockRecorder
}

// MockWriteDAOMockRecorder is the mock recorder for MockWriteDAO.
type MockWriteDAOMockRecorder struct {
	mock *MockWriteDAO
}

// NewMockWriteDAO creates a new mock instance.
func NewMockWriteDAO(ctrl *gomock.Controller) *MockWriteDAO {
	mock := &MockWriteDAO{ctrl: ctrl}
	mock.recorder = &MockWriteDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriteDAO) EXPECT() *MockWriteDAOMockRecorder {
	return m.recorder
}

// AddAccountTransaction mocks base method.
func (m *MockWriteDAO) AddAccountTransaction(ctx context.Context, account *model.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAccountTransaction", ctx, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAccountTransaction indicates an expected call of AddAccountTransaction.
func (mr *MockWriteDAOMockRecorder) AddAccountTransaction(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccountTransaction", reflect.TypeOf((*MockWriteDAO)(nil).AddAccountTransaction), ctx, account)
}

// CreateAccount mocks base method.
func (m *MockWriteDAO) CreateAccount(ctx context.Context, account *model.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockWriteDAOMockRecorder) CreateAccount(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockWriteDAO)(nil).CreateAccount), ctx, account)
}

// Exists mocks base method.
func (m *MockWriteDAO) Exists(ctx context.Context, accountNumber string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, accountNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockWriteDAOMockRecorder) Exists(ctx, accountNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockWriteDAO)(nil).Exists), ctx, accountNumber)
}

// UpdateBalance mocks base method.
func (m *MockWriteDAO) UpdateBalance(ctx context.Context, accountNumber string, balance float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalance", ctx, accountNumber, balance)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBalance indicates an expected call of UpdateBalance.
func (mr *MockWriteDAOMockRecorder) UpdateBalance(ctx, accountNumber, balance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalance", reflect.TypeOf((*MockWriteDAO)(nil).UpdateBalance), ctx, accountNumber, balance)
}
