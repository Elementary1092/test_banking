// Code generated by MockGen. DO NOT EDIT.
// Source: /home/quark/alif/internal/domain/account/query/dao.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/Elementary1092/test_banking/internal/domain/account/query/model"
	gomock "github.com/golang/mock/gomock"
)

// MockReadDAO is a mock of ReadDAO interface.
type MockReadDAO struct {
	ctrl     *gomock.Controller
	recorder *MockReadDAOMockRecorder
}

// MockReadDAOMockRecorder is the mock recorder for MockReadDAO.
type MockReadDAOMockRecorder struct {
	mock *MockReadDAO
}

// NewMockReadDAO creates a new mock instance.
func NewMockReadDAO(ctrl *gomock.Controller) *MockReadDAO {
	mock := &MockReadDAO{ctrl: ctrl}
	mock.recorder = &MockReadDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadDAO) EXPECT() *MockReadDAOMockRecorder {
	return m.recorder
}

// FindAccount mocks base method.
func (m *MockReadDAO) FindAccount(ctx context.Context, params map[string]string) (*model.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAccount", ctx, params)
	ret0, _ := ret[0].(*model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAccount indicates an expected call of FindAccount.
func (mr *MockReadDAOMockRecorder) FindAccount(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAccount", reflect.TypeOf((*MockReadDAO)(nil).FindAccount), ctx, params)
}

// FindTransactions mocks base method.
func (m *MockReadDAO) FindTransactions(ctx context.Context, accountNumber string, limit, offset uint64) (*model.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTransactions", ctx, accountNumber, limit, offset)
	ret0, _ := ret[0].(*model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTransactions indicates an expected call of FindTransactions.
func (mr *MockReadDAOMockRecorder) FindTransactions(ctx, accountNumber, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTransactions", reflect.TypeOf((*MockReadDAO)(nil).FindTransactions), ctx, accountNumber, limit, offset)
}
