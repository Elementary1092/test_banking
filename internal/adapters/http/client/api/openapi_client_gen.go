// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CustomerInfo request
	CustomerInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountCreate request with any body
	AccountCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccountCreate(ctx context.Context, body AccountCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountGet request
	AccountGet(ctx context.Context, accountNumber string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountReplenish request with any body
	AccountReplenishWithBody(ctx context.Context, accountNumber string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccountReplenish(ctx context.Context, accountNumber string, body AccountReplenishJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountTransfer request with any body
	AccountTransferWithBody(ctx context.Context, accountNumber string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccountTransfer(ctx context.Context, accountNumber string, body AccountTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountWithdraw request with any body
	AccountWithdrawWithBody(ctx context.Context, accountNumber string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccountWithdraw(ctx context.Context, accountNumber string, body AccountWithdrawJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RefreshToken request with any body
	RefreshTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RefreshToken(ctx context.Context, body RefreshTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustomerSignIn request with any body
	CustomerSignInWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CustomerSignIn(ctx context.Context, body CustomerSignInJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustomerSignUp request with any body
	CustomerSignUpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CustomerSignUp(ctx context.Context, body CustomerSignUpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CustomerInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomerInfoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountCreate(ctx context.Context, body AccountCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountGet(ctx context.Context, accountNumber string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountGetRequest(c.Server, accountNumber)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountReplenishWithBody(ctx context.Context, accountNumber string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountReplenishRequestWithBody(c.Server, accountNumber, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountReplenish(ctx context.Context, accountNumber string, body AccountReplenishJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountReplenishRequest(c.Server, accountNumber, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountTransferWithBody(ctx context.Context, accountNumber string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountTransferRequestWithBody(c.Server, accountNumber, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountTransfer(ctx context.Context, accountNumber string, body AccountTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountTransferRequest(c.Server, accountNumber, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountWithdrawWithBody(ctx context.Context, accountNumber string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountWithdrawRequestWithBody(c.Server, accountNumber, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountWithdraw(ctx context.Context, accountNumber string, body AccountWithdrawJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountWithdrawRequest(c.Server, accountNumber, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RefreshTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRefreshTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RefreshToken(ctx context.Context, body RefreshTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRefreshTokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomerSignInWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomerSignInRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomerSignIn(ctx context.Context, body CustomerSignInJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomerSignInRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomerSignUpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomerSignUpRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomerSignUp(ctx context.Context, body CustomerSignUpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomerSignUpRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCustomerInfoRequest generates requests for CustomerInfo
func NewCustomerInfoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/customer")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountCreateRequest calls the generic AccountCreate builder with application/json body
func NewAccountCreateRequest(server string, body AccountCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccountCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAccountCreateRequestWithBody generates requests for AccountCreate with any type of body
func NewAccountCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/customer/accounts/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAccountGetRequest generates requests for AccountGet
func NewAccountGetRequest(server string, accountNumber string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_number", runtime.ParamLocationPath, accountNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/customer/accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountReplenishRequest calls the generic AccountReplenish builder with application/json body
func NewAccountReplenishRequest(server string, accountNumber string, body AccountReplenishJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccountReplenishRequestWithBody(server, accountNumber, "application/json", bodyReader)
}

// NewAccountReplenishRequestWithBody generates requests for AccountReplenish with any type of body
func NewAccountReplenishRequestWithBody(server string, accountNumber string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_number", runtime.ParamLocationPath, accountNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/customer/accounts/%s/replenish", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAccountTransferRequest calls the generic AccountTransfer builder with application/json body
func NewAccountTransferRequest(server string, accountNumber string, body AccountTransferJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccountTransferRequestWithBody(server, accountNumber, "application/json", bodyReader)
}

// NewAccountTransferRequestWithBody generates requests for AccountTransfer with any type of body
func NewAccountTransferRequestWithBody(server string, accountNumber string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_number", runtime.ParamLocationPath, accountNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/customer/accounts/%s/transfer", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAccountWithdrawRequest calls the generic AccountWithdraw builder with application/json body
func NewAccountWithdrawRequest(server string, accountNumber string, body AccountWithdrawJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccountWithdrawRequestWithBody(server, accountNumber, "application/json", bodyReader)
}

// NewAccountWithdrawRequestWithBody generates requests for AccountWithdraw with any type of body
func NewAccountWithdrawRequestWithBody(server string, accountNumber string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_number", runtime.ParamLocationPath, accountNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/customer/accounts/%s/withdraw", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRefreshTokenRequest calls the generic RefreshToken builder with application/json body
func NewRefreshTokenRequest(server string, body RefreshTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRefreshTokenRequestWithBody(server, "application/json", bodyReader)
}

// NewRefreshTokenRequestWithBody generates requests for RefreshToken with any type of body
func NewRefreshTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/customer/refresh-token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCustomerSignInRequest calls the generic CustomerSignIn builder with application/json body
func NewCustomerSignInRequest(server string, body CustomerSignInJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCustomerSignInRequestWithBody(server, "application/json", bodyReader)
}

// NewCustomerSignInRequestWithBody generates requests for CustomerSignIn with any type of body
func NewCustomerSignInRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/customer/signin")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCustomerSignUpRequest calls the generic CustomerSignUp builder with application/json body
func NewCustomerSignUpRequest(server string, body CustomerSignUpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCustomerSignUpRequestWithBody(server, "application/json", bodyReader)
}

// NewCustomerSignUpRequestWithBody generates requests for CustomerSignUp with any type of body
func NewCustomerSignUpRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/customer/signup")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CustomerInfo request
	CustomerInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CustomerInfoResponse, error)

	// AccountCreate request with any body
	AccountCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountCreateResponse, error)

	AccountCreateWithResponse(ctx context.Context, body AccountCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountCreateResponse, error)

	// AccountGet request
	AccountGetWithResponse(ctx context.Context, accountNumber string, reqEditors ...RequestEditorFn) (*AccountGetResponse, error)

	// AccountReplenish request with any body
	AccountReplenishWithBodyWithResponse(ctx context.Context, accountNumber string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountReplenishResponse, error)

	AccountReplenishWithResponse(ctx context.Context, accountNumber string, body AccountReplenishJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountReplenishResponse, error)

	// AccountTransfer request with any body
	AccountTransferWithBodyWithResponse(ctx context.Context, accountNumber string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountTransferResponse, error)

	AccountTransferWithResponse(ctx context.Context, accountNumber string, body AccountTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountTransferResponse, error)

	// AccountWithdraw request with any body
	AccountWithdrawWithBodyWithResponse(ctx context.Context, accountNumber string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountWithdrawResponse, error)

	AccountWithdrawWithResponse(ctx context.Context, accountNumber string, body AccountWithdrawJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountWithdrawResponse, error)

	// RefreshToken request with any body
	RefreshTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RefreshTokenResponse, error)

	RefreshTokenWithResponse(ctx context.Context, body RefreshTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*RefreshTokenResponse, error)

	// CustomerSignIn request with any body
	CustomerSignInWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CustomerSignInResponse, error)

	CustomerSignInWithResponse(ctx context.Context, body CustomerSignInJSONRequestBody, reqEditors ...RequestEditorFn) (*CustomerSignInResponse, error)

	// CustomerSignUp request with any body
	CustomerSignUpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CustomerSignUpResponse, error)

	CustomerSignUpWithResponse(ctx context.Context, body CustomerSignUpJSONRequestBody, reqEditors ...RequestEditorFn) (*CustomerSignUpResponse, error)
}

type CustomerInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Customer
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r CustomerInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustomerInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateAccountResponse
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r AccountCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetAccountResponse
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r AccountGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountReplenishResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r AccountReplenishResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountReplenishResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountTransferResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r AccountTransferResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountTransferResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountWithdrawResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r AccountWithdrawResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountWithdrawResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RefreshTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SignInResponse
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r RefreshTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RefreshTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustomerSignInResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SignInResponse
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r CustomerSignInResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustomerSignInResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustomerSignUpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r CustomerSignUpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustomerSignUpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CustomerInfoWithResponse request returning *CustomerInfoResponse
func (c *ClientWithResponses) CustomerInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CustomerInfoResponse, error) {
	rsp, err := c.CustomerInfo(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomerInfoResponse(rsp)
}

// AccountCreateWithBodyWithResponse request with arbitrary body returning *AccountCreateResponse
func (c *ClientWithResponses) AccountCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountCreateResponse, error) {
	rsp, err := c.AccountCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountCreateResponse(rsp)
}

func (c *ClientWithResponses) AccountCreateWithResponse(ctx context.Context, body AccountCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountCreateResponse, error) {
	rsp, err := c.AccountCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountCreateResponse(rsp)
}

// AccountGetWithResponse request returning *AccountGetResponse
func (c *ClientWithResponses) AccountGetWithResponse(ctx context.Context, accountNumber string, reqEditors ...RequestEditorFn) (*AccountGetResponse, error) {
	rsp, err := c.AccountGet(ctx, accountNumber, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountGetResponse(rsp)
}

// AccountReplenishWithBodyWithResponse request with arbitrary body returning *AccountReplenishResponse
func (c *ClientWithResponses) AccountReplenishWithBodyWithResponse(ctx context.Context, accountNumber string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountReplenishResponse, error) {
	rsp, err := c.AccountReplenishWithBody(ctx, accountNumber, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountReplenishResponse(rsp)
}

func (c *ClientWithResponses) AccountReplenishWithResponse(ctx context.Context, accountNumber string, body AccountReplenishJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountReplenishResponse, error) {
	rsp, err := c.AccountReplenish(ctx, accountNumber, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountReplenishResponse(rsp)
}

// AccountTransferWithBodyWithResponse request with arbitrary body returning *AccountTransferResponse
func (c *ClientWithResponses) AccountTransferWithBodyWithResponse(ctx context.Context, accountNumber string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountTransferResponse, error) {
	rsp, err := c.AccountTransferWithBody(ctx, accountNumber, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountTransferResponse(rsp)
}

func (c *ClientWithResponses) AccountTransferWithResponse(ctx context.Context, accountNumber string, body AccountTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountTransferResponse, error) {
	rsp, err := c.AccountTransfer(ctx, accountNumber, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountTransferResponse(rsp)
}

// AccountWithdrawWithBodyWithResponse request with arbitrary body returning *AccountWithdrawResponse
func (c *ClientWithResponses) AccountWithdrawWithBodyWithResponse(ctx context.Context, accountNumber string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountWithdrawResponse, error) {
	rsp, err := c.AccountWithdrawWithBody(ctx, accountNumber, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountWithdrawResponse(rsp)
}

func (c *ClientWithResponses) AccountWithdrawWithResponse(ctx context.Context, accountNumber string, body AccountWithdrawJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountWithdrawResponse, error) {
	rsp, err := c.AccountWithdraw(ctx, accountNumber, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountWithdrawResponse(rsp)
}

// RefreshTokenWithBodyWithResponse request with arbitrary body returning *RefreshTokenResponse
func (c *ClientWithResponses) RefreshTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RefreshTokenResponse, error) {
	rsp, err := c.RefreshTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRefreshTokenResponse(rsp)
}

func (c *ClientWithResponses) RefreshTokenWithResponse(ctx context.Context, body RefreshTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*RefreshTokenResponse, error) {
	rsp, err := c.RefreshToken(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRefreshTokenResponse(rsp)
}

// CustomerSignInWithBodyWithResponse request with arbitrary body returning *CustomerSignInResponse
func (c *ClientWithResponses) CustomerSignInWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CustomerSignInResponse, error) {
	rsp, err := c.CustomerSignInWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomerSignInResponse(rsp)
}

func (c *ClientWithResponses) CustomerSignInWithResponse(ctx context.Context, body CustomerSignInJSONRequestBody, reqEditors ...RequestEditorFn) (*CustomerSignInResponse, error) {
	rsp, err := c.CustomerSignIn(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomerSignInResponse(rsp)
}

// CustomerSignUpWithBodyWithResponse request with arbitrary body returning *CustomerSignUpResponse
func (c *ClientWithResponses) CustomerSignUpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CustomerSignUpResponse, error) {
	rsp, err := c.CustomerSignUpWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomerSignUpResponse(rsp)
}

func (c *ClientWithResponses) CustomerSignUpWithResponse(ctx context.Context, body CustomerSignUpJSONRequestBody, reqEditors ...RequestEditorFn) (*CustomerSignUpResponse, error) {
	rsp, err := c.CustomerSignUp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomerSignUpResponse(rsp)
}

// ParseCustomerInfoResponse parses an HTTP response from a CustomerInfoWithResponse call
func ParseCustomerInfoResponse(rsp *http.Response) (*CustomerInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustomerInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Customer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAccountCreateResponse parses an HTTP response from a AccountCreateWithResponse call
func ParseAccountCreateResponse(rsp *http.Response) (*AccountCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAccountGetResponse parses an HTTP response from a AccountGetWithResponse call
func ParseAccountGetResponse(rsp *http.Response) (*AccountGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAccountReplenishResponse parses an HTTP response from a AccountReplenishWithResponse call
func ParseAccountReplenishResponse(rsp *http.Response) (*AccountReplenishResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountReplenishResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAccountTransferResponse parses an HTTP response from a AccountTransferWithResponse call
func ParseAccountTransferResponse(rsp *http.Response) (*AccountTransferResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountTransferResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAccountWithdrawResponse parses an HTTP response from a AccountWithdrawWithResponse call
func ParseAccountWithdrawResponse(rsp *http.Response) (*AccountWithdrawResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountWithdrawResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRefreshTokenResponse parses an HTTP response from a RefreshTokenWithResponse call
func ParseRefreshTokenResponse(rsp *http.Response) (*RefreshTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RefreshTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SignInResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCustomerSignInResponse parses an HTTP response from a CustomerSignInWithResponse call
func ParseCustomerSignInResponse(rsp *http.Response) (*CustomerSignInResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustomerSignInResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SignInResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCustomerSignUpResponse parses an HTTP response from a CustomerSignUpWithResponse call
func ParseCustomerSignUpResponse(rsp *http.Response) (*CustomerSignUpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustomerSignUpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}
